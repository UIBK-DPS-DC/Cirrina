---
- name: Update apt cache and install apt-transport-https, ca-certificates, curl and gpg
  ansible.builtin.apt:
    update_cache: yes
    state: present
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
      - firewalld

- name: Create directory for apt keyrings
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes apt key
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.key
    mode: '0644'
    force: true

- name: Extract gpg keys with dearmor
  ansible.builtin.command:
    cmd: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/kubernetes-apt-keyring.key"
    creates: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"

- name: Add Kubernetes repo into sources list
  ansible.builtin.apt_repository:
    filename: kubernetes
    repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /'

- name: Update apt cache and install kubelet, kubeadm, kubectl and containerd
  ansible.builtin.apt:
    update_cache: yes
    state: present
    pkg:
      - kubelet
      - kubeadm
      - kubectl
      - containerd

- name: Create /etc/containerd/ folder if not exists
  ansible.builtin.file:
    path: "/etc/containerd/"
    state: directory

- name: Get containerd config
  ansible.builtin.command: containerd config default
  register: containerd_config

- name: Save containerd config to file /etc/containerd/
  ansible.builtin.template:
    src: "config_template.j2"
    dest: /etc/containerd/config.toml
    mode: '0644'

- name: Change SystemdCgroup to true in containerd config
  ansible.builtin.replace:
    path: "/etc/containerd/config.toml"
    regexp: 'SystemdCgroup\s*=.*$'
    replace: 'SystemdCgroup = true'

- name: Restart containerd
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: containerd

- name: Load br_netfilter kernel module
  community.general.modprobe:
    name: br_netfilter

- name: Set net.ipv4.ip_forward to 1
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_set: yes

- name: Disable swap for current session
  ansible.builtin.command: swapoff -a

- name: Add cronjob to disable swap at reboot
  ansible.builtin.cron:
    name: "disable swap"
    special_time: reboot
    job: "/sbin/swapoff -a"

- name: Restart and enable kubelet
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: kubelet
    enabled: true

- name: Allow traffic on port 6443
  ansible.posix.firewalld:
    port: 6443/tcp
    zone: public
    state: enabled
    permanent: true

- name: Allow traffic on port 10250
  ansible.posix.firewalld:
    port: 10250/tcp
    zone: public
    state: enabled
    permanent: true

- name: Allow traffic on local Network
  ansible.posix.firewalld:
    source: "{{ local_network }}"
    zone: trusted
    state: enabled
    permanent: true

- name: Reload firewall
  ansible.builtin.service:
    name: firewalld
    state: reloaded