amends "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl"
import "https://raw.githubusercontent.com/UIBK-DPS-DC/Cirrina-Specifications/main/pkl/CollaborativeStateMachineDescription.pkl" as CSM

// ------------------------ CSM -------------------------------
name = "collaborativeStateMachine"
version = "2.0"
stateMachines {
    stateMachine1
    stateMachine2
}

// ------------------------ StateMachine Description -------------------------------
local stateMachine1: CSM.StateMachineDescription = new {
    name = "stateMachine1"
    stateMachines {
        stateMachine1_1
        stateMachine1_2
    }
    states {
        state1
        state2
        state3
    }
}

local stateMachine2: CSM.StateMachineDescription = new {
    name = "stateMachine2"
    states {
        state1_sm2
        state2_sm2
    }
}

// ------------------------ Nested StateMachine1_1 -------------------------------
local stateMachine1_1: CSM.StateMachineDescription = new {
    name = "stateMachine1_1"
    states {
        state1_1
        state1_2
    }
}

local state1_1: CSM.StateDescription = new {
    name = "state1_1"
    initial = true
    exit {
        new CSM.InvokeActionDescription {
            serviceType = "patternRecognition"
            input {
                new {
                    name = "maxValue"
                    value = "5"
                }
                new {
                    name = "minValue"
                    value = "0"
                }
            }
        }
    }
    on {
        new CSM.OnTransitionDescription {
            target = "state1_2"
            event = "e1_1"
        }
    }
}

local state1_2: CSM.StateDescription = new {
    name = "state1_2"
    terminal = true
}

// ------------------------ Nested StateMachine1_2 -------------------------------
local stateMachine1_2: CSM.StateMachineDescription = new {
    name = "stateMachine1_2"
    states {
        state1_3
        state1_4
    }
}

local state1_3: CSM.StateDescription = new {
    name = "state1_3"
    initial = true
    on {
        new CSM.OnTransitionDescription {
            target = "state1_4"
            event = "e1_2"
            guards {
                new CSM.GuardDescription {
                    expression = "v > 5"
                }
                new CSM.GuardDescription {
                    expression = "v < 10"
                }
            }
        }
    }
}

local state1_4: CSM.StateDescription = new {
    name = "state1_4"
    terminal = true
    entry {
        new CSM.AssignActionDescription {
            variable {
                name = "v"
                value = "v*2"
            }
        }
    }
}

// ------------------------ States -------------------------------
local state1: CSM.StateDescription = new {
    name = "state1"
    initial = true
    entry {
        action1
        new CSM.RaiseActionDescription {
            event {
                name = "e1"
                channel = "internal"
            }
        }
    }
    on {
        new CSM.OnTransitionDescription {
            target = "state2"
            event = "e1"
            guards {
                new CSM.GuardDescription {
                    expression = "v > 5"
                }
            }
        }
    }
}

local state2: CSM.StateDescription = new {
    name = "state2"
    entry {
        new CSM.AssignActionDescription {
            variable {
                name = "v"
                value = "v+1"
            }
        }
        new CSM.AssignActionDescription {
            variable {
                name = "v"
                value = "v+2"
            }
        }
        new CSM.RaiseActionDescription {
            event {
                name = "e2"
                channel = "internal"
            }
        }
    }
    while {
        new CSM.InvokeActionDescription {
            serviceType = "faceRecognition"
        }
    }
    exit {
        new CSM.CreateActionDescription {
            variable {
                name = "v"
                value = "5"
            }
        }
    }
    on {
        new CSM.OnTransitionDescription {
            target = "state2"
            event = "e2"
            actions {
                new CSM.AssignActionDescription {
                    variable {
                        name = "v"
                        value = "v+1"
                    }
                }
                new CSM.AssignActionDescription {
                    variable {
                        name = "v"
                        value = "v+1"
                    }
                }
                new CSM.RaiseActionDescription {
                    event {
                        name = "e2"
                        channel = "internal"
                    }
                }
            }
        }
        new CSM.OnTransitionDescription {
            target = "state3"
            event = "e3"
        }
    }
}

local state3: CSM.StateDescription = new {
    name = "state3"
    terminal = true
    entry {
        new CSM.AssignActionDescription {
            variable {
                name = "v"
                value = "v*2"
            }
        }
    }
}

// ------------------------ Actions -------------------------------
local action1: CSM.CreateActionDescription = new {
    variable {
        name = "v"
        value = "5"
    }
}

local action2: CSM.CreateActionDescription = new {
    variable {
        name = "b"
        value = "true"
    }
}

// ------------------------ StateMachine2 States -------------------------------
local state1_sm2: CSM.StateDescription = new {
    name = "state1"
    initial = true
    entry {
        action1
        new CSM.RaiseActionDescription {
            event {
                name = "e1"
                channel = "internal"
            }
        }
    }
    exit {
        new CSM.InvokeActionDescription {
            serviceType = "patternRecognition"
        }
    }
    on {
        new CSM.OnTransitionDescription {
            target = "state2"
            event = "stop"
            guards {
                new CSM.GuardDescription {
                    expression = "v != 0"
                }
                guard1
            }
            actions {
                action1
            }
        }
    }
}

local state2_sm2: CSM.StateDescription = new {
    name = "state2"
    terminal = true
    entry {
        new CSM.AssignActionDescription {
            variable {
                name = "v"
                value = "v*2 + 1"
            }
        }
    }
}

// ------------------------ Guards -------------------------------
local guard1: CSM.GuardDescription = new {
    expression = "v < 4 && b"
}