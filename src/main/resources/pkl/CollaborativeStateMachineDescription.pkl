/// Collaborative state machine construct. Represents the highest level entity in a description.
/// 
/// Keywords:
/// <table border="1">
///  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
///  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
///  <tr><td>version</td><td>CSML version</td><td>Yes</td></tr>
///  <tr><td>stateMachines</td><td>StateClass machines</td><td>Yes (at least one)</td></tr>
///  <tr><td>localContext</td><td>Lexical description of the local context</td><td>No</td></tr>
///  <tr><td>persistentContext</td><td>Lexical description of the persistent context</td><td>No</td></tr>
/// </table>
/// 1.0
/// Example:
/// <pre>
/// {
///   name: 'Collaborative State Machine Name',
///   version: '0.1',
///   stateMachines: [...]
/// }
/// </pre>
/// 
/// @since CSML 1.0.
@ModuleInfo { minPklVersion = "0.26.2" }
module at.ac.uibk.dps.cirrina.csml.description.CollaborativeStateMachineDescription
/// The name.
name: String
/// The CSML version.
///
/// The following CSML versions are valid:
/// <table border="1">
///   <tr><th>Version</th><th>Value</th></tr>
///   <tr><td>Version 0.1</td><td>0.1</td></tr>
/// </table>
version: Version
/// The state machines.
///
/// At least one state machine must be provided.
stateMachines: Listing<StateMachineDescription>
/// The optional lexical declaration of local context variables.
localContext: ContextDescription?
/// The optional lexical declaration of persistent context variables.
persistentContext: ContextDescription?


typealias Version = "2.0"
typealias ExpressionDescription = String

/// State machine construct. Represents a state machine within a collaborative state machine.
///
/// Keywords:
/// <table border="1">
///  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
///  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
///  <tr><td>localContext</td><td>Lexical description of the local context</td><td>No</td></tr>
///  <tr><td>persistentContext</td><td>Lexical description of the persistent context</td><td>No</td></tr>
/// </table>
///
/// Example:
/// <pre>
/// {
///   name: 'Collaborative State Machine Name',
///   states: [...],
///   stateMachines: [...],
///   localContext: [...],
///   persistentContext: [...],
///   guards: [],
///   actions: [],
/// }
/// </pre>
///
/// @since CSML 1.0.
open class StateMachineDescription {
    /// The name.
    name: String
    /// The states.
    /// <p>
    /// At least one initial state must be provided.
    /// </p>
    states: Listing<StateDescription>
    /// The nested state machines of this state machine.
    stateMachines: Listing<StateMachineDescription>
    /// The optional lexical declaration of local context variables.
    localContext: ContextDescription?
    /// The optional lexical declaration of persistent context variables.
    persistentContext: ContextDescription?
}

/// State construct, represents an atomic state of a state machine.
///
/// Keywords:
/// <table border="1">
///  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
///  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
///  <tr><td>initial</td><td>Initial state flag</td><td>No</td></tr>
///  <tr><td>terminal</td><td>Terminal state flag</td><td>No</td></tr>
///  <tr><td>entry</td><td>On entry actions</td><td>No</td></tr>
///  <tr><td>exit</td><td>On exit actions</td><td>No</td></tr>
///  <tr><td>while</td><td>While actions</td><td>No</td></tr>
///  <tr><td>after</td><td>Timeout actions</td><td>No</td></tr>
///  <tr><td>on</td><td>On transitions</td><td>No</td></tr>
///  <tr><td>always</td><td>Always transitions</td><td>No</td></tr>
///  <tr><td>localContext</td><td>Lexical description of the local context</td><td>No</td></tr>
///  <tr><td>persistentContext</td><td>Lexical description of the persistent context</td><td>No</td></tr>
///  <tr><td>staticContext</td><td>Lexical description of the static context</td><td>No</td></tr>
/// </table>
///
/// Example:
/// <pre>
/// {
///   name: 'State Name',
///   initial: true,
///   terminal: false,
///   entry: [...],
///   exit: [...],
///   while: [...],
///   after: [...],
///   on: [...],
///   localContext: [...],
///   persistentContext: [...],
///   staticContext: [...]
/// }
/// </pre>
///
/// @since CSML 1.0.
open class StateDescription {
    /// The name.
    name: String
    /// The is initial flag. Indicating if this is the initial state of the state machine. Exactly one state must be the initial state of a
    /// state machine. If omitted, the state is not initial.
    initial: Boolean = false
    /// The is terminal flag. Indicating if this is a terminal state of the state machine. If omitted, the state is not terminal.
    terminal: Boolean = false
    /// The optional entry actions.
    entry: Listing<ActionDescription>
    /// The optional exit actions.
    exit: Listing<ActionDescription>
    /// The optional while actions.
    while: Listing<ActionDescription>
    /// The optional after (timeout) actions. Actions provided must be raise event actions.
    after: Listing<ActionDescription>
    /// The optional on transitions. On transitions are taken upon event receiving an event that matches the 'event' keyword of the on
    /// transition.
    on: Listing<OnTransitionDescription>
    /// The optional always transitions. Always transitions are always taken upon entering a state.
    always: Listing<TransitionDescription>
    /// The optional lexical declaration of local context variables.
    localContext: ContextDescription
    /// The optional lexical declaration of persistent context variables.
    persistentContext: ContextDescription
    /// The optional lexical declaration of static context variables.
    staticContext: ContextDescription
}

/// Transition construct. Represents a transition that is to be taken regardless of an event.
///
/// Keywords:
/// <table border="1">
///  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
///  <tr><td>target</td><td>Target state</td><td>Yes</td></tr>
///  <tr><td>guards</td><td>Guards</td><td>Yes</td></tr>
///  <tr><td>actions</td><td>Actions</td><td>Yes</td></tr>
///  <tr><td>else</td><td>Else target</td><td>No</td></tr>
/// </table>
///
/// Example:
/// <pre>
/// {
///   target: 'State Name',
///   guards: [...],
///   actions: [...]
/// }
/// </pre>
///
/// @since CSML 1.0.
open class TransitionDescription {
    /// The optional target state name. If the target is omitted, the transition is internal.
    target: String?
    /// The optional guards. All guard expressions need to evaluate to true before a transition can be taken.
    guards: Listing<GuardDescription>
    /// The optional actions. These actions are executed during the transition, if the transition is taken.
    actions: Listing<ActionDescription>
    /// The optional else target name. If the guards evaluate to false, the state machine ends up in this target state.
    `else`: String?
}

/// Guard construct. Represents a conditional (if) that determines if a transition can be taken.
///
/// Keywords:
/// <table border="1">
///  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
///  <tr><td>name</td><td>Unique name</td><td>Yes</td></tr>
///  <tr><td>expression</td><td>Expression</td><td>Yes</td></tr>
/// </table>
///
/// Example:
/// <pre>
/// {
///   name: 'Guard Name',
///   expression: 'a==5'
/// }
/// </pre>
///
/// @since CSML 1.0.
open class GuardDescription {
    /// An expression.
    /// <p>
    /// The expression must evaluate to a boolean value.
    /// </p>
    expression: ExpressionDescription
}

/// On transition construct. Represents a transition that is to be taken based on a received event.
///
/// Keywords:
/// <table border="1">
///  <tr><th>Keyword</th><th>Description</th><th>Required</th></tr>
///  <tr><td>event</td><td>Event</td><td>Yes</td></tr>
/// </table>
///
/// Example:
/// <pre>
/// {
///   target: 'StateClass Name',
///   guards: [...],
///   actions: [...],
///   event: 'Event Name'
/// }
/// </pre>
///
/// @since CSML 1.0.
class OnTransitionDescription extends TransitionDescription {
    event: String
}

/// An abstract action construct. Represents an action that can be taken in a state machine.
abstract class ActionDescription {
    type: Type
}

typealias Type = "invoke" | "create" | "assign" | "lock" | "unlock" | "raise" | "timeout" | "timeoutReset" | "match"

/// Assign action construct. Represents an assignment of a value to a context variable.
class AssignActionDescription extends ActionDescription {
    type: Type = "assign"
    variable: ContextVariableDescription
}

/// Create action construct. Represents the creation of a context variable.
class CreateActionDescription extends ActionDescription {
    type: Type = "create"
    /// The context variable to be created.
    variable: ContextVariableDescription
    /// Determines if the context variable is persistent.
    isPersistent: Boolean = false
}

/// Invoke action construct. Represents the invocation of a service.
class InvokeActionDescription extends ActionDescription {
    type: Type = "invoke"
    /// The service type.
    serviceType: String
    /// Determines if the service is local.
    isLocal: Boolean = false
    /// The input parameters.
    input: Listing<ContextVariableDescription>
    /// The events to be raised when the service is done.
    done: Listing<EventDescription>
    /// The output mappings to context variables.
    output: Listing<ContextVariableReferenceDescription>
}

/// Match action construct. Represents a match action.
class MatchActionDescription extends ActionDescription {
    type: Type = "match"
    /// The value to be matched.
    value: ExpressionDescription
    /// The match cases.
    cases: Listing<MatchCaseDescription>
}

/// Match case construct.
class MatchCaseDescription {
    /// The case value.
    `case`: ExpressionDescription
    /// The actions to be taken if the case value matches the value of the match action.
    action: ActionDescription
}

/// Raise action construct. Represents the raising of an event.
class RaiseActionDescription extends ActionDescription {
    type: Type = "raise"
    /// The event to be raised.
    event: EventDescription
}

/// Timeout action construct. Represents a timeout action.
class TimeoutActionDescription extends ActionDescription {
    type: Type = "timeout"
    /// The name of the timeout action.
    name: String
    /// The delay until the timeout action is executed.
    delay: ExpressionDescription // Note: if Code Generation is working replace with Duration type
    /// The action to be executed when the timeout occurs.
    action: ActionDescription
}

/// Timeout reset action construct. Represents a timeout reset action.
class TimeoutResetActionDescription extends ActionDescription {
    type: Type = "timeoutReset"
    /// The timeout action to reset.
    action: String
}

///Event construct. Represents an event that can be raised.
class EventDescription {
    /// The event name.
    name: String
    /// The event channel.
    channel: EventChannel
    /// The event data.
    data: Listing<ContextVariableDescription>
}

/// The event channel. Represents the channel on which an event is raised.
typealias EventChannel = "internal" | "external" | "global" | "peripheral"

/// Context variable reference construct. Represents a reference to a context variable.
class ContextVariableReferenceDescription {
    reference: String
}

/// Context description construct. Represents a context.
class ContextDescription {
    variables: Listing<ContextVariableDescription>
}

/// Context variable description construct. Represents a context variable.
class ContextVariableDescription {
    name: String
    value: ExpressionDescription
}
